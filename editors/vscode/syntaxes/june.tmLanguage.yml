# todo: struct fields are getting source.june (see rust2.rs lines 1885 and 1888 with self.slice_head)
# you can capture this because function and method calls will always have parens, even if they are chained to another function by a dot, so you can match the case where a dot is followed by lowercase and then a word boundary without parens
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: June
fileTypes:
  - june
scopeName: source.june
patterns:
  - comment: boxed slice literal
    begin: (<)(\[)
    beginCaptures:
      1:
        name: punctuation.brackets.angle.june
      2:
        name: punctuation.brackets.square.june
    end: ">"
    endCaptures:
      0:
        name: punctuation.brackets.angle.june
    patterns:
      - include: "#block-comments"
      - include: "#comments"
      - include: "#gtypes"
      - include: "#lvariables"
      - include: "#lifetimes"
      - include: "#punctuation"
      - include: "#types"
  - comment: macro type metavariables
    name: meta.macro.metavariable.type.june
    match: (\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?
    captures:
      1:
        name: keyword.operator.macro.dollar.june
      3:
        name: keyword.other.crate.june
      4:
        name: entity.name.type.metavariable.june
      6:
        name: keyword.operator.key-value.june
      7:
        name: variable.other.metavariable.specifier.june
    patterns:
      - include: "#keywords"
  - comment: macro metavariables
    name: meta.macro.metavariable.june
    match: (\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?
    captures:
      1:
        name: keyword.operator.macro.dollar.june
      2:
        name: variable.other.metavariable.name.june
      4:
        name: keyword.operator.key-value.june
      5:
        name: variable.other.metavariable.specifier.june
    patterns:
      - include: "#keywords"
  - comment: macro rules
    name: meta.macro.rules.june
    match: \b(macro_rules!)\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\s+(\{)
    captures:
      1:
        name: entity.name.function.macro.rules.june
      3:
        name: entity.name.function.macro.june
      4:
        name: entity.name.type.macro.june
      5:
        name: punctuation.brackets.curly.june
  - comment: attributes
    name: meta.attribute.june
    begin: '(#)(\!?)(\[)'
    beginCaptures:
      1:
        name: punctuation.definition.attribute.june
      2:
        name: keyword.operator.attribute.inner.june
      3:
        name: punctuation.brackets.attribute.june
    end: '\]'
    endCaptures:
      0:
        name: punctuation.brackets.attribute.june
    patterns:
      - include: "#block-comments"
      - include: "#comments"
      - include: "#keywords"
      - include: "#lifetimes"
      - include: "#punctuation"
      - include: "#strings"
      - include: "#gtypes"
      - include: "#types"
  - comment: modules
    match: (mod)\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)
    captures:
      1:
        name: storage.type.june
      2:
        name: entity.name.module.june
  - comment: external crate imports
    name: meta.import.june
    begin: \b(extern)\s+(crate)
    beginCaptures:
      1:
        name: storage.type.june
      2:
        name: keyword.other.crate.june
    end: ;
    endCaptures:
      0:
        name: punctuation.semi.june
    patterns:
      - include: "#block-comments"
      - include: "#comments"
      - include: "#keywords"
      - include: "#punctuation"
  - comment: use statements
    name: meta.use.june
    begin: \b(use)\s
    beginCaptures:
      1:
        name: keyword.other.june
    end: ;
    endCaptures:
      0:
        name: punctuation.semi.june
    patterns:
      - include: "#block-comments"
      - include: "#comments"
      - include: "#keywords"
      - include: "#namespaces"
      - include: "#punctuation"
      - include: "#types"
      - include: "#lvariables"
  - include: "#block-comments"
  - include: "#comments"
  - include: "#lvariables"
  - include: "#constants"
  - include: "#gtypes"
  - include: "#functions"
  - include: "#types"
  - include: "#keywords"
  - include: "#lifetimes"
  - include: "#macros"
  - include: "#namespaces"
  - include: "#punctuation"
  - include: "#strings"
  - include: "#variables"
repository:
  comments:
    patterns:
      - comment: documentation comments
        name: comment.line.documentation.june
        match: ^\s*///.*
      - comment: line comments
        name: comment.line.double-slash.june
        match: \s*//.*
  block-comments:
    patterns:
      - comment: empty block comments
        name: comment.block.june
        match: /\*\*/
      - comment: block documentation comments
        name: comment.block.documentation.june
        begin: /\*\*
        end: \*/
        patterns:
          - include: "#block-comments"
      - comment: block comments
        name: comment.block.june
        begin: /\*(?!\*)
        end: \*/
        patterns:
          - include: "#block-comments"
  constants:
    patterns:
      - comment: ALL CAPS constants
        name: constant.other.caps.june
        match: \b[A-Z]{2}[A-Z0-9_]*\b
      - comment: constant declarations
        match: \b(const)\s+([A-Z][A-Za-z0-9_]*)\b
        captures:
          1:
            name: storage.type.june
          2:
            name: constant.other.caps.june
      - comment: decimal integers and floats
        name: constant.numeric.decimal.june
        match: \b\d[\d_]*(\.?)[\d_]*(?:(E)([+-])([\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\b
        captures:
          1:
            name: punctuation.separator.dot.decimal.june
          2:
            name: keyword.operator.exponent.june
          3:
            name: keyword.operator.exponent.sign.june
          4:
            name: constant.numeric.decimal.exponent.mantissa.june
          5:
            name: entity.name.type.numeric.june
      - comment: hexadecimal integers
        name: constant.numeric.hex.june
        match: \b0x[\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\b
        captures:
          1:
            name: entity.name.type.numeric.june
      - comment: octal integers
        name: constant.numeric.oct.june
        match: \b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\b
        captures:
          1:
            name: entity.name.type.numeric.june
      - comment: binary integers
        name: constant.numeric.bin.june
        match: \b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\b
        captures:
          1:
            name: entity.name.type.numeric.june
      - comment: booleans
        name: constant.language.bool.june
        match: \b(true|false)\b
      - comment: pointers
        name: constant.language.pointers.june
        match: \b(none)\b
  escapes:
    comment: "escapes: ASCII, byte, Unicode, quote, regex"
    name: constant.character.escape.june
    match: (\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\{)[\da-fA-F]{4,6}(\}))|.))
    captures:
      1:
        name: constant.character.escape.backslash.june
      2:
        name: constant.character.escape.bit.june
      3:
        name: constant.character.escape.unicode.june
      4:
        name: constant.character.escape.unicode.punctuation.june
      5:
        name: constant.character.escape.unicode.punctuation.june
  functions:
    patterns:
      - comment: pub as a function
        match: \b(pub)(\()
        captures:
          1:
            name: keyword.other.june
          2:
            name: punctuation.brackets.round.june
      - comment: function definition
        name: meta.function.definition.june
        begin: \b(fun)\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\()|(<))
        beginCaptures:
          1:
            name: keyword.other.fun.june
          2:
            name: entity.name.function.june
          4:
            name: punctuation.brackets.round.june
          5:
            name: punctuation.brackets.angle.june
        end: \{|;
        endCaptures:
          0:
            name: punctuation.brackets.curly.june
        patterns:
          - include: "#block-comments"
          - include: "#comments"
          - include: "#keywords"
          - include: "#lvariables"
          - include: "#constants"
          - include: "#gtypes"
          - include: "#functions"
          - include: "#lifetimes"
          - include: "#macros"
          - include: "#namespaces"
          - include: "#punctuation"
          - include: "#strings"
          - include: "#types"
          - include: "#variables"
      - # todo: capitalized functions in most cases represent enum members or tuple structs
        # separate these out and color them accordingly
        # this has to be done without breaking struct scoping when the struct keyword is used:
        # struct MyStruct()
        # this currently highlights correctly, even with parens
        comment: function/method calls, chaining
        name: meta.function.call.june
        begin: ((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\()
        beginCaptures:
          1:
            name: entity.name.function.june
          2:
            name: punctuation.brackets.round.june
        end: \)
        endCaptures:
          0:
            name: punctuation.brackets.round.june
        patterns:
          - include: "#block-comments"
          - include: "#comments"
          - include: "#keywords"
          - include: "#lvariables"
          - include: "#constants"
          - include: "#gtypes"
          - include: "#functions"
          - include: "#lifetimes"
          - include: "#macros"
          - include: "#namespaces"
          - include: "#punctuation"
          - include: "#strings"
          - include: "#types"
          - include: "#variables"
      - comment: function/method calls with turbofish
        name: meta.function.call.june
        begin: ((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\()
        beginCaptures:
          1:
            name: entity.name.function.june
        end: \)
        endCaptures:
          0:
            name: punctuation.brackets.round.june
        patterns:
          - include: "#block-comments"
          - include: "#comments"
          - include: "#keywords"
          - include: "#lvariables"
          - include: "#constants"
          - include: "#gtypes"
          - include: "#functions"
          - include: "#lifetimes"
          - include: "#macros"
          - include: "#namespaces"
          - include: "#punctuation"
          - include: "#strings"
          - include: "#types"
          - include: "#variables"
  keywords:
    patterns:
      - comment: control flow keywords
        name: keyword.control.june
        match: \b(await|break|continue|do|else|for|if|loop|match|return|try|while|yield)\b
      - comment: storage keywords
        name: keyword.other.june storage.type.june
        match: \b(extern|let|macro|mod)\b
      - comment: const keyword
        name: storage.modifier.june
        match: \b(const)\b
      - comment: type keyword
        name: keyword.declaration.type.june storage.type.june
        match: \b(type)\b
      - comment: enum keyword
        name: keyword.declaration.enum.june storage.type.june
        match: \b(enum)\b
      - comment: trait keyword
        name: keyword.declaration.trait.june storage.type.june
        match: \b(trait)\b
      - comment: struct keyword
        name: keyword.declaration.struct.june storage.type.june
        match: \b(struct)\b
      - comment: allocator keyword
        name: keyword.declaration.allocator.june storage.type.june
        match: \b(allocator)\b
      - comment: storage modifiers
        name: storage.modifier.june
        match: \b(abstract|static)\b
      - comment: other keywords
        name: keyword.other.june
        match: \b(as|async|become|box|dyn|move|final|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|virtual|where)\b
      - comment: fun
        name: keyword.other.fun.june
        match: \bfn\b
      - comment: crate
        name: keyword.other.crate.june
        match: \bcrate\b
      - comment: mut
        name: storage.modifier.mut.june
        match: \bmut\b
      - comment: new
        name: storage.modifier.new.june
        match: \bnew\b
      - comment: shared
        name: storage.modifier.shared.june
        match: \bshared\b
      - comment: owned
        name: storage.modifier.owned.june
        match: \bowned\b
      - comment: logical operators
        name: keyword.operator.logical.june
        match: (\^|\||\|\||&&|<<|>>|!)(?!=)
      - comment: logical AND, borrow references
        name: keyword.operator.borrow.and.june
        match: "&(?![&=])"
      - comment: assignment operators
        name: keyword.operator.assignment.june
        match: (\+=|-=|\*=|/=|%=|\^=|&=|\|=|<<=|>>=)
      - comment: single equal
        name: keyword.operator.assignment.equal.june
        match: "(?<![<>])=(?!=|>)"
      - comment: comparison operators
        name: keyword.operator.comparison.june
        match: (=(=)?(?!>)|!=|<=|(?<!=)>=)
      - comment: math operators
        name: keyword.operator.math.june
        match: '(([+%]|(\*(?!\w)))(?!=))|(-(?!>))|(/(?!/))'
      - comment: less than, greater than (special case)
        match: (?:\b|(?:(\))|(\])|(\})))[ \t]+([<>])[ \t]+(?:\b|(?:(\()|(\[)|(\{)))
        captures:
          1:
            name: punctuation.brackets.round.june
          2:
            name: punctuation.brackets.square.june
          3:
            name: punctuation.brackets.curly.june
          4:
            name: keyword.operator.comparison.june
          5:
            name: punctuation.brackets.round.june
          6:
            name: punctuation.brackets.square.june
          7:
            name: punctuation.brackets.curly.june
      - comment: namespace operator
        name: keyword.operator.namespace.june
        match: "::"
      - comment: dereference asterisk
        match: (\*)(?=\w+)
        captures:
          1:
            name: keyword.operator.dereference.june
      - comment: subpattern binding
        name: keyword.operator.subpattern.june
        match: "@"
      - comment: dot access
        name: keyword.operator.access.dot.june
        match: \.(?!\.)
      - comment: ranges, range patterns
        name: keyword.operator.range.june
        match: \.{2}(=|\.)?
      - comment: colon
        name: keyword.operator.key-value.june
        match: ":(?!:)"
      - comment: dashrocket, skinny arrow
        name: keyword.operator.arrow.skinny.june
        match: ->
      - comment: hashrocket, fat arrow
        name: keyword.operator.arrow.fat.june
        match: =>
      - comment: dollar macros
        name: keyword.operator.macro.dollar.june
        match: \$
      - comment: question mark operator, questionably sized, macro kleene matcher
        name: keyword.operator.question.june
        match: \?
  interpolations:
    comment: curly brace interpolations
    name: meta.interpolation.june
    match: '({)[^"{}]*(})'
    captures:
      1:
        name: punctuation.definition.interpolation.june
      2:
        name: punctuation.definition.interpolation.june
  lifetimes:
    patterns:
      - comment: named lifetime parameters
        match: (['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\b
        captures:
          1:
            name: punctuation.definition.lifetime.june
          2:
            name: entity.name.type.lifetime.june
      - comment: borrowing references to named lifetimes
        match: (\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\b
        captures:
          1:
            name: keyword.operator.borrow.june
          2:
            name: punctuation.definition.lifetime.june
          3:
            name: entity.name.type.lifetime.june
  macros:
    patterns:
      - comment: macros
        name: meta.macro.june
        match: (([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))
        captures:
          2:
            name: entity.name.function.macro.june
          3:
            name: entity.name.type.macro.june
  namespaces:
    patterns:
      - comment: namespace (non-type, non-function path segment)
        match: (?<![A-Za-z0-9_])([a-z0-9_]+)((?<!super|self)::)
        captures:
          1:
            name: entity.name.namespace.june
          2:
            name: keyword.operator.namespace.june
  types:
    patterns:
      - comment: numeric types
        match: '(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\b'
        captures:
          1:
            name: entity.name.type.numeric.june
      - comment: parameterized types
        begin: \b([A-Z][A-Za-z0-9]*)(<)
        beginCaptures:
          1:
            name: entity.name.type.june
          2:
            name: punctuation.brackets.angle.june
        end: ">"
        endCaptures:
          0:
            name: punctuation.brackets.angle.june
        patterns:
          - include: "#block-comments"
          - include: "#comments"
          - include: "#keywords"
          - include: "#lvariables"
          - include: "#lifetimes"
          - include: "#punctuation"
          - include: "#types"
          - include: "#variables"
      - comment: primitive types
        name: entity.name.type.primitive.june
        match: \b(bool|char|str)\b
      - comment: trait declarations
        match: \b(trait)\s+([A-Z][A-Za-z0-9]*)\b
        captures:
          1:
            name: keyword.declaration.trait.june storage.type.june
          2:
            name: entity.name.type.trait.june
      # todo: add a specific case for struct fields so they can have different scope than variables - make sure not to catch namespaces
      - comment: struct declarations
        match: \b(struct)\s+([A-Z][A-Za-z0-9]*)\b
        captures:
          1:
            name: keyword.declaration.struct.june storage.type.june
          2:
            name: entity.name.type.struct.june
      - comment: enum declarations
        match: \b(enum)\s+([A-Z][A-Za-z0-9_]*)\b
        captures:
          1:
            name: keyword.declaration.enum.june storage.type.june
          2:
            name: entity.name.type.enum.june
      - comment: type declarations
        match: \b(type)\s+([A-Z][A-Za-z0-9_]*)\b
        captures:
          1:
            name: keyword.declaration.type.june storage.type.june
          2:
            name: entity.name.type.declaration.june
      - comment: types
        name: entity.name.type.june
        match: '\b[A-Z][A-Za-z0-9]*\b(?!!)'
  gtypes:
    patterns:
      - comment: option types
        name: entity.name.type.option.june
        match: \b(Some|None)\b
      - comment: result types
        name: entity.name.type.result.june
        match: \b(Ok|Err)\b
  punctuation:
    patterns:
      - comment: comma
        name: punctuation.comma.june
        match: ","
      - comment: curly braces
        name: punctuation.brackets.curly.june
        match: "[{}]"
      - comment: parentheses, round brackets
        name: punctuation.brackets.round.june
        match: "[()]"
      - comment: semicolon
        name: punctuation.semi.june
        match: ;
      - comment: square brackets
        name: punctuation.brackets.square.june
        match: '[\[\]]'
      - comment: angle brackets
        name: punctuation.brackets.angle.june
        match: "(?<!=)[<>]"
  strings:
    patterns:
      - comment: double-quoted strings and byte strings
        name: string.quoted.double.june
        begin: '(b?)(")'
        beginCaptures:
          1:
            name: string.quoted.byte.raw.june
          2:
            name: punctuation.definition.string.june
        end: '"'
        endCaptures:
          0:
            name: punctuation.definition.string.june
        patterns:
          - include: "#escapes"
          - include: "#interpolations"
      - comment: double-quoted raw strings and raw byte strings
        name: string.quoted.double.june
        begin: '(b?r)(#*)(")'
        beginCaptures:
          1:
            name: string.quoted.byte.raw.june
          2:
            name: punctuation.definition.string.raw.june
          3:
            name: punctuation.definition.string.june
        end: '(")(\2)'
        endCaptures:
          1:
            name: punctuation.definition.string.june
          2:
            name: punctuation.definition.string.raw.june
      - comment: characters and bytes
        name: string.quoted.single.char.june
        begin: "(b)?(')"
        beginCaptures:
          1:
            name: string.quoted.byte.raw.june
          2:
            name: punctuation.definition.char.june
        end: "'"
        endCaptures:
          0:
            name: punctuation.definition.char.june
        patterns:
          - include: "#escapes"
  lvariables:
    patterns:
      - comment: self
        name: variable.language.self.june
        match: \b[Ss]elf\b
      - comment: super
        name: variable.language.super.june
        match: \bsuper\b
  variables:
    patterns:
      # In order to capture variables ending ranges, but not struct field access, we match a preceding dot, only if it's preceded by at least one other dot.
      # The double negation states that the pattern "must not be preceded by a dot that is not preceded by a dot."
      # Attempting to match on (\.{2,})? won't work, because then struct field access can match after the dot.
      - comment: variables
        name: variable.other.june
        match: \b(?<!(?<!\.)\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\b
